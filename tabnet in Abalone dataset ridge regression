{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d30b2226",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-15T13:55:20.596201Z",
     "iopub.status.busy": "2024-04-15T13:55:20.595712Z",
     "iopub.status.idle": "2024-04-15T13:55:22.953215Z",
     "shell.execute_reply": "2024-04-15T13:55:22.951988Z"
    },
    "papermill": {
     "duration": 2.373812,
     "end_time": "2024-04-15T13:55:22.955548",
     "exception": false,
     "start_time": "2024-04-15T13:55:20.581736",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/abalone1/abalone.csv\n",
      "/kaggle/input/playground-series-s4e4/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e4/train.csv\n",
      "/kaggle/input/playground-series-s4e4/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "from sklearn.metrics import mean_squared_error\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ad15ff5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:55:22.977483Z",
     "iopub.status.busy": "2024-04-15T13:55:22.976577Z",
     "iopub.status.idle": "2024-04-15T13:55:39.433243Z",
     "shell.execute_reply": "2024-04-15T13:55:39.431778Z"
    },
    "papermill": {
     "duration": 16.471075,
     "end_time": "2024-04-15T13:55:39.436370",
     "exception": false,
     "start_time": "2024-04-15T13:55:22.965295",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pytorch-tabnet\r\n",
      "  Downloading pytorch_tabnet-4.1.0-py3-none-any.whl.metadata (15 kB)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (1.26.4)\r\n",
      "Requirement already satisfied: scikit_learn>0.21 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (1.2.2)\r\n",
      "Requirement already satisfied: scipy>1.4 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (1.11.4)\r\n",
      "Requirement already satisfied: torch>=1.3 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (2.1.2+cpu)\r\n",
      "Requirement already satisfied: tqdm>=4.36 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (4.66.1)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit_learn>0.21->pytorch-tabnet) (1.3.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit_learn>0.21->pytorch-tabnet) (3.2.0)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (3.13.1)\r\n",
      "Requirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (4.9.0)\r\n",
      "Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (1.12)\r\n",
      "Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (3.2.1)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (3.1.2)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (2024.2.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.3->pytorch-tabnet) (2.1.3)\r\n",
      "Requirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.3->pytorch-tabnet) (1.3.0)\r\n",
      "Downloading pytorch_tabnet-4.1.0-py3-none-any.whl (44 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.5/44.5 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: pytorch-tabnet\r\n",
      "Successfully installed pytorch-tabnet-4.1.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install pytorch-tabnet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1648f4b5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:55:39.459505Z",
     "iopub.status.busy": "2024-04-15T13:55:39.459060Z",
     "iopub.status.idle": "2024-04-15T13:55:39.849408Z",
     "shell.execute_reply": "2024-04-15T13:55:39.848132Z"
    },
    "papermill": {
     "duration": 0.405324,
     "end_time": "2024-04-15T13:55:39.852292",
     "exception": false,
     "start_time": "2024-04-15T13:55:39.446968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Length  Diameter  Height  Whole weight  Whole weight.1  Whole weight.2  \\\n",
      "0   0.455     0.365   0.095        0.5140          0.2245          0.1010   \n",
      "1   0.350     0.265   0.090        0.2255          0.0995          0.0485   \n",
      "2   0.530     0.420   0.135        0.6770          0.2565          0.1415   \n",
      "\n",
      "   Shell weight  Rings  Sex_F  Sex_I  Sex_M  \n",
      "0          0.15     15  False  False   True  \n",
      "1          0.07      7  False  False   True  \n",
      "2          0.21      9   True  False  False  \n"
     ]
    }
   ],
   "source": [
    "train_dataset_root = r\"/kaggle/input/playground-series-s4e4/train.csv\"\n",
    "train_dataset_root2 = r\"/kaggle/input/abalone1/abalone.csv\"\n",
    "test_dataset_root = r\"/kaggle/input/playground-series-s4e4/test.csv\"\n",
    "train_dataset = pd.read_csv(train_dataset_root)\n",
    "# one hot\n",
    "train_dataset = pd.get_dummies(train_dataset, columns=['Sex'])\n",
    "test_dataset = pd.read_csv(test_dataset_root)\n",
    "test_dataset = pd.get_dummies(test_dataset, columns=['Sex'])\n",
    "# print(train_dataset.head(3))\n",
    "train_dataset2 = pd.read_csv(train_dataset_root2)\n",
    "train_dataset2 = pd.get_dummies(train_dataset2, columns=['Sex'])\n",
    "train_dataset2 = train_dataset2.rename(columns={'Shucked weight': 'Whole weight.1', 'Viscera weight': 'Whole weight.2'})\n",
    "print(train_dataset2.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1ac76377",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:55:39.876128Z",
     "iopub.status.busy": "2024-04-15T13:55:39.875706Z",
     "iopub.status.idle": "2024-04-15T13:55:39.961867Z",
     "shell.execute_reply": "2024-04-15T13:55:39.960744Z"
    },
    "papermill": {
     "duration": 0.10146,
     "end_time": "2024-04-15T13:55:39.964573",
     "exception": false,
     "start_time": "2024-04-15T13:55:39.863113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X: (90615, 10)\n",
      "Shape of X2: (4177, 10)\n",
      "[[0.55 0.43 0.15 ... True False False]\n",
      " [0.63 0.49 0.145 ... True False False]\n",
      " [0.16 0.11 0.025 ... False True False]\n",
      " ...\n",
      " [0.6 0.475 0.205 ... False False True]\n",
      " [0.625 0.485 0.15 ... True False False]\n",
      " [0.71 0.555 0.195 ... False False True]]\n",
      "[[0.455 0.365 0.095 ... False False True]\n",
      " [0.35 0.265 0.09 ... False False True]\n",
      " [0.53 0.42 0.135 ... True False False]\n",
      " ...\n",
      " [0.6 0.475 0.205 ... False False True]\n",
      " [0.625 0.485 0.15 ... True False False]\n",
      " [0.71 0.555 0.195 ... False False True]]\n",
      "[11 11  6 ...  9 10 12]\n"
     ]
    }
   ],
   "source": [
    "X = train_dataset.drop(columns=[\"id\",\"Rings\"]).values  # feature\n",
    "X2 = train_dataset2.drop(columns=[\"Rings\"]).values\n",
    "print(\"Shape of X:\", X.shape)\n",
    "print(\"Shape of X2:\", X2.shape)\n",
    "X = np.concatenate((X, X2), axis=0)\n",
    "y = train_dataset['Rings'].values  # label\n",
    "y2 = train_dataset2['Rings'].values  # label\n",
    "y = np.concatenate((y, y2), axis=0)\n",
    "print(X)\n",
    "print(X2)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "550f5bb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:55:39.987975Z",
     "iopub.status.busy": "2024-04-15T13:55:39.987568Z",
     "iopub.status.idle": "2024-04-15T13:55:40.015622Z",
     "shell.execute_reply": "2024-04-15T13:55:40.014692Z"
    },
    "papermill": {
     "duration": 0.043032,
     "end_time": "2024-04-15T13:55:40.018284",
     "exception": false,
     "start_time": "2024-04-15T13:55:39.975252",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(94792, 10)\n",
      "(94792, 3)\n",
      "(94792, 7)\n",
      "[[1 0 0]\n",
      " [1 0 0]\n",
      " [0 1 0]\n",
      " ...\n",
      " [0 0 1]\n",
      " [1 0 0]\n",
      " [0 0 1]]\n"
     ]
    }
   ],
   "source": [
    "sex_features = X[:,-3:]\n",
    "X_without_sex = X[:, :-3]\n",
    "sex_features_numeric = sex_features.astype(int)\n",
    "print(X.shape)\n",
    "print(sex_features.shape)\n",
    "print(X_without_sex.shape)\n",
    "print(sex_features_numeric)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d91c300",
   "metadata": {
    "papermill": {
     "duration": 0.010617,
     "end_time": "2024-04-15T13:55:40.039769",
     "exception": false,
     "start_time": "2024-04-15T13:55:40.029152",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Preprocess**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7ba2d05f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:55:40.064783Z",
     "iopub.status.busy": "2024-04-15T13:55:40.063833Z",
     "iopub.status.idle": "2024-04-15T13:55:43.824998Z",
     "shell.execute_reply": "2024-04-15T13:55:43.823696Z"
    },
    "papermill": {
     "duration": 3.777159,
     "end_time": "2024-04-15T13:55:43.827692",
     "exception": false,
     "start_time": "2024-04-15T13:55:40.050533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-2.2602359  -2.21182968 -2.11147625 ...  0.          1.\n",
      "   0.        ]\n",
      " [ 1.71247228  1.86616924  1.5541619  ...  0.          0.\n",
      "   1.        ]\n",
      " [ 1.28984375  1.20349441  1.03049931 ...  0.          0.\n",
      "   1.        ]\n",
      " ...\n",
      " [ 0.10648387  0.18399468 -0.27865717 ...  0.          1.\n",
      "   0.        ]\n",
      " [ 1.50115802  1.2544694   1.29233061 ...  0.          0.\n",
      "   1.        ]\n",
      " [-1.24592743 -1.29427992 -1.06415106 ...  0.          1.\n",
      "   0.        ]]\n",
      "[[ 4]\n",
      " [11]\n",
      " [ 9]\n",
      " ...\n",
      " [ 8]\n",
      " [11]\n",
      " [ 7]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from sklearn.model_selection import train_test_split\n",
    "scaler = StandardScaler()\n",
    "X_scaled_ws = scaler.fit_transform(X_without_sex)\n",
    "X_scaled = np.concatenate((X_scaled_ws, sex_features_numeric), axis=1)\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_scaled, y, test_size=0.2, random_state=42)\n",
    "print(X_train)\n",
    "\n",
    "y_train = np.reshape(y_train, (-1, 1))\n",
    "y_val = np.reshape(y_val, (-1, 1))\n",
    "print(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2b9df9df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:55:43.853333Z",
     "iopub.status.busy": "2024-04-15T13:55:43.852708Z",
     "iopub.status.idle": "2024-04-15T13:58:03.897159Z",
     "shell.execute_reply": "2024-04-15T13:58:03.895726Z"
    },
    "papermill": {
     "duration": 140.060682,
     "end_time": "2024-04-15T13:58:03.900092",
     "exception": false,
     "start_time": "2024-04-15T13:55:43.839410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/pytorch_tabnet/abstract_model.py:82: UserWarning: Device used : cpu\n",
      "  warnings.warn(f\"Device used : {self.device}\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 0  | loss: 12.42995| val_0_rmsle: 0.19312 |  0:00:04s\n",
      "epoch 1  | loss: 3.94806 | val_0_rmsle: 0.16452 |  0:00:09s\n",
      "epoch 2  | loss: 3.83119 | val_0_rmsle: 0.16248 |  0:00:14s\n",
      "epoch 3  | loss: 3.83368 | val_0_rmsle: 0.16782 |  0:00:19s\n",
      "epoch 4  | loss: 3.80894 | val_0_rmsle: 0.15865 |  0:00:24s\n",
      "epoch 5  | loss: 3.79094 | val_0_rmsle: 0.15683 |  0:00:29s\n",
      "epoch 6  | loss: 3.7193  | val_0_rmsle: 0.15757 |  0:00:34s\n",
      "epoch 7  | loss: 3.70343 | val_0_rmsle: 0.15752 |  0:00:39s\n",
      "epoch 8  | loss: 3.71072 | val_0_rmsle: 0.15661 |  0:00:44s\n",
      "epoch 9  | loss: 3.70443 | val_0_rmsle: 0.15901 |  0:00:49s\n",
      "epoch 10 | loss: 3.70822 | val_0_rmsle: 0.15673 |  0:00:55s\n",
      "epoch 11 | loss: 3.70083 | val_0_rmsle: 0.15646 |  0:01:00s\n",
      "epoch 12 | loss: 3.68392 | val_0_rmsle: 0.15587 |  0:01:05s\n",
      "epoch 13 | loss: 3.67879 | val_0_rmsle: 0.15574 |  0:01:10s\n",
      "epoch 14 | loss: 3.67523 | val_0_rmsle: 0.15691 |  0:01:14s\n",
      "epoch 15 | loss: 3.6612  | val_0_rmsle: 0.15644 |  0:01:19s\n",
      "epoch 16 | loss: 3.65866 | val_0_rmsle: 0.15524 |  0:01:24s\n",
      "epoch 17 | loss: 3.67338 | val_0_rmsle: 0.15775 |  0:01:29s\n",
      "epoch 18 | loss: 3.66952 | val_0_rmsle: 0.16102 |  0:01:34s\n",
      "epoch 19 | loss: 3.69518 | val_0_rmsle: 0.15531 |  0:01:39s\n",
      "epoch 20 | loss: 3.65186 | val_0_rmsle: 0.15727 |  0:01:44s\n",
      "epoch 21 | loss: 3.63407 | val_0_rmsle: 0.15543 |  0:01:49s\n",
      "epoch 22 | loss: 3.65079 | val_0_rmsle: 0.15858 |  0:01:54s\n",
      "epoch 23 | loss: 3.65247 | val_0_rmsle: 0.1561  |  0:01:59s\n",
      "epoch 24 | loss: 3.62029 | val_0_rmsle: 0.15886 |  0:02:04s\n",
      "epoch 25 | loss: 3.64115 | val_0_rmsle: 0.15926 |  0:02:09s\n",
      "epoch 26 | loss: 3.65729 | val_0_rmsle: 0.15907 |  0:02:14s\n",
      "\n",
      "Early stopping occurred at epoch 26 with best_epoch = 16 and best_val_0_rmsle = 0.15524\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!\n",
      "  warnings.warn(wrn_msg)\n"
     ]
    }
   ],
   "source": [
    "from pytorch_tabnet.tab_model import TabNetRegressor\n",
    "\n",
    "clf = TabNetRegressor(n_steps=3, cat_idxs=[7,8,9], cat_dims=[2,2,2], device_name=\"cuda\")\n",
    "clf.fit(\n",
    "    X_train, y_train,\n",
    "    eval_set=[(X_val, y_val)],\n",
    "    eval_metric=['rmsle'], \n",
    ")\n",
    "y_val_pred_tabnet = clf.predict(X_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1871bc90",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:58:03.931278Z",
     "iopub.status.busy": "2024-04-15T13:58:03.930433Z",
     "iopub.status.idle": "2024-04-15T13:58:03.935595Z",
     "shell.execute_reply": "2024-04-15T13:58:03.934262Z"
    },
    "papermill": {
     "duration": 0.023153,
     "end_time": "2024-04-15T13:58:03.938415",
     "exception": false,
     "start_time": "2024-04-15T13:58:03.915262",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from pytorch_tabnet.multitask import TabNetMultiTaskClassifier\n",
    "# clf2 = TabNetMultiTaskClassifier()\n",
    "# clf2.fit(\n",
    "#     X_train, y_train,\n",
    "#     eval_set=[(X_val, y_val)],\n",
    "#     eval_metric=['rmsle'], \n",
    "# )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d609156",
   "metadata": {
    "papermill": {
     "duration": 0.013207,
     "end_time": "2024-04-15T13:58:03.965799",
     "exception": false,
     "start_time": "2024-04-15T13:58:03.952592",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# XGB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ba315809",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:58:03.995009Z",
     "iopub.status.busy": "2024-04-15T13:58:03.994588Z",
     "iopub.status.idle": "2024-04-15T13:58:04.839997Z",
     "shell.execute_reply": "2024-04-15T13:58:04.838151Z"
    },
    "papermill": {
     "duration": 0.863288,
     "end_time": "2024-04-15T13:58:04.842676",
     "exception": false,
     "start_time": "2024-04-15T13:58:03.979388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation RMSE: 1.8624415950332058\n"
     ]
    }
   ],
   "source": [
    "from xgboost import XGBRegressor\n",
    "xgb_model = XGBRegressor()\n",
    "xgb_model.fit(X_train, y_train)\n",
    "# Making predictions on the validation set\n",
    "y_val_pred_xgb = xgb_model.predict(X_val)\n",
    "\n",
    "# evaluate the model\n",
    "val_rmse = mean_squared_error(y_val, y_val_pred_xgb, squared=False)\n",
    "print(\"Validation RMSE:\", val_rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69f123f4",
   "metadata": {
    "papermill": {
     "duration": 0.013295,
     "end_time": "2024-04-15T13:58:04.871099",
     "exception": false,
     "start_time": "2024-04-15T13:58:04.857804",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# LGBM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c93a97d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:58:04.900747Z",
     "iopub.status.busy": "2024-04-15T13:58:04.899870Z",
     "iopub.status.idle": "2024-04-15T13:58:07.002257Z",
     "shell.execute_reply": "2024-04-15T13:58:07.000587Z"
    },
    "papermill": {
     "duration": 2.11987,
     "end_time": "2024-04-15T13:58:07.004737",
     "exception": false,
     "start_time": "2024-04-15T13:58:04.884867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010659 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 1336\n",
      "[LightGBM] [Info] Number of data points in the train set: 75833, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 9.711972\n",
      "Validation RMSE: 1.8670301071436686\n"
     ]
    }
   ],
   "source": [
    "import lightgbm as lgb\n",
    "lgb_model = lgb.LGBMRegressor()\n",
    "lgb_model.fit(X_train, y_train)\n",
    "# Making predictions on the validation set\n",
    "y_val_pred_lgb = lgb_model.predict(X_val)\n",
    "\n",
    "# evaluate the model\n",
    "val_rmse = mean_squared_error(y_val, y_val_pred_lgb, squared=False)\n",
    "print(\"Validation RMSE:\", val_rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8c01c41",
   "metadata": {
    "papermill": {
     "duration": 0.01395,
     "end_time": "2024-04-15T13:58:07.033626",
     "exception": false,
     "start_time": "2024-04-15T13:58:07.019676",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4394b532",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:58:07.064001Z",
     "iopub.status.busy": "2024-04-15T13:58:07.063323Z",
     "iopub.status.idle": "2024-04-15T13:58:48.880318Z",
     "shell.execute_reply": "2024-04-15T13:58:48.878906Z"
    },
    "papermill": {
     "duration": 41.848583,
     "end_time": "2024-04-15T13:58:48.896546",
     "exception": false,
     "start_time": "2024-04-15T13:58:07.047963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_18/3979043488.py:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
      "  rf_model.fit(X_train, y_train)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation RMSE: 1.8894899500601432\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "rf_model = RandomForestRegressor()\n",
    "rf_model.fit(X_train, y_train)\n",
    "# Making predictions on the validation set\n",
    "y_val_pred_rf = rf_model.predict(X_val)\n",
    "# evaluate the model\n",
    "val_rmse = mean_squared_error(y_val, y_val_pred_rf, squared=False)\n",
    "print(\"Validation RMSE:\", val_rmse)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "550f7688",
   "metadata": {
    "papermill": {
     "duration": 0.013992,
     "end_time": "2024-04-15T13:58:48.925482",
     "exception": false,
     "start_time": "2024-04-15T13:58:48.911490",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Gradient Boosting Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "85a4e2dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:58:48.956475Z",
     "iopub.status.busy": "2024-04-15T13:58:48.956086Z",
     "iopub.status.idle": "2024-04-15T13:59:00.190464Z",
     "shell.execute_reply": "2024-04-15T13:59:00.189157Z"
    },
    "papermill": {
     "duration": 11.252912,
     "end_time": "2024-04-15T13:59:00.193125",
     "exception": false,
     "start_time": "2024-04-15T13:58:48.940213",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/ensemble/_gb.py:437: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation RMSE: 1.911837972403849\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "gb_model = GradientBoostingRegressor()\n",
    "gb_model.fit(X_train, y_train)\n",
    "# Making predictions on the validation set\n",
    "y_val_pred_gb = gb_model.predict(X_val)\n",
    "# evaluate the model\n",
    "val_rmse = mean_squared_error(y_val, y_val_pred_gb, squared=False)\n",
    "print(\"Validation RMSE:\", val_rmse)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db176c3f",
   "metadata": {
    "papermill": {
     "duration": 0.01416,
     "end_time": "2024-04-15T13:59:00.222150",
     "exception": false,
     "start_time": "2024-04-15T13:59:00.207990",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# NODE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c9f814a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:00.253793Z",
     "iopub.status.busy": "2024-04-15T13:59:00.252669Z",
     "iopub.status.idle": "2024-04-15T13:59:00.262406Z",
     "shell.execute_reply": "2024-04-15T13:59:00.261265Z"
    },
    "papermill": {
     "duration": 0.028646,
     "end_time": "2024-04-15T13:59:00.265040",
     "exception": false,
     "start_time": "2024-04-15T13:59:00.236394",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# class NODEModel(nn.Module):\n",
    "#     \"\"\"\n",
    "#     Neural Oblivious Decision Ensembles (NODE) model.\n",
    "#     \"\"\"\n",
    "#     def __init__(self, input_dim, num_trees, depth):\n",
    "#         \"\"\"\n",
    "#         Initialize the NODE model.\n",
    "        \n",
    "#         Args:\n",
    "#             input_dim (int): Number of input features.\n",
    "#             num_trees (int): Number of decision trees in the ensemble.\n",
    "#             depth (int): Depth of each decision tree.\n",
    "#         \"\"\"\n",
    "#         super(NODEModel, self).__init__()\n",
    "#         self.num_trees = num_trees\n",
    "#         self.depth = depth\n",
    "        \n",
    "#         # Create a list of decision trees\n",
    "#         self.trees = nn.ModuleList([nn.Sequential(\n",
    "#             nn.Linear(input_dim, 2 ** depth),\n",
    "#             nn.ReLU(),\n",
    "#             nn.Linear(2 ** depth, 1)\n",
    "#         ) for _ in range(num_trees)])\n",
    "    \n",
    "#     def forward(self, x):\n",
    "#         \"\"\"\n",
    "#         Perform forward pass through the NODE model.\n",
    "        \n",
    "#         Args:\n",
    "#             x (torch.Tensor): Input tensor.\n",
    "            \n",
    "#         Returns:\n",
    "#             torch.Tensor: Averaged predictions from all decision trees.\n",
    "#         \"\"\"\n",
    "#         # Forward pass through each decision tree\n",
    "#         outputs = [tree(x) for tree in self.trees]\n",
    "        \n",
    "#         # Average the predictions from all trees\n",
    "#         return torch.mean(torch.stack(outputs), dim=0)\n",
    "\n",
    "# class AbaloneDataset(Dataset):\n",
    "#     \"\"\"\n",
    "#     Custom dataset class for abalone data.\n",
    "#     \"\"\"\n",
    "#     def __init__(self, X, y=None):\n",
    "#         \"\"\"\n",
    "#         Initialize the AbaloneDataset.\n",
    "        \n",
    "#         Args:\n",
    "#             X (numpy.ndarray): Input features.\n",
    "#             y (numpy.ndarray, optional): Target variable. Defaults to None.\n",
    "#         \"\"\"\n",
    "#         self.X = torch.tensor(X, dtype=torch.float32)\n",
    "#         self.y = torch.tensor(y, dtype=torch.float32) if y is not None else None\n",
    "    \n",
    "#     def __len__(self):\n",
    "#         \"\"\"\n",
    "#         Return the length of the dataset.\n",
    "        \n",
    "#         Returns:\n",
    "#             int: Length of the dataset.\n",
    "#         \"\"\"\n",
    "#         return len(self.X)\n",
    "    \n",
    "#     def __getitem__(self, idx):\n",
    "#         \"\"\"\n",
    "#         Get an item from the dataset.\n",
    "        \n",
    "#         Args:\n",
    "#             idx (int): Index of the item.\n",
    "            \n",
    "#         Returns:\n",
    "#             tuple: Input features and target variable (if available) for the given index.\n",
    "#         \"\"\"\n",
    "#         if self.y is not None:\n",
    "#             return self.X[idx], self.y[idx]\n",
    "#         else:\n",
    "#             return self.X[idx]\n",
    "\n",
    "# params = {\n",
    "#         'num_trees': trial.suggest_int('num_trees', 50, 200),\n",
    "#         'depth': trial.suggest_int('depth', 4, 8),\n",
    "#         'num_epochs': 200,\n",
    "#         'batch_size': trial.suggest_int('batch_size', 16, 128),\n",
    "#         'learning_rate': trial.suggest_float('learning_rate', 1e-4, 1e-2, log=True),\n",
    "#         'early_stopping_patience': 10\n",
    "#     }\n",
    "# input_dim = X_train.shape[1]\n",
    "# num_trees = params['num_trees']\n",
    "# depth = params['depth']\n",
    "# num_epochs = params['num_epochs']\n",
    "# batch_size = params['batch_size']\n",
    "# learning_rate = params['learning_rate']\n",
    "# early_stopping_patience = params['early_stopping_patience']\n",
    "\n",
    "# device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "# model = NODEModel(input_dim, num_trees, depth).to(device)\n",
    "# criterion = nn.MSELoss()\n",
    "# optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
    "\n",
    "# for epoch in range(params[\"num_epochs\"]):\n",
    "#     model.train()\n",
    "#     optimizer.zero_grad()\n",
    "#     outputs = model(X_train)\n",
    "#     loss = criterion(outputs.squeeze(), y_train)\n",
    "#     loss.backward()\n",
    "#     optimizer.step()\n",
    "\n",
    "# model.eval()\n",
    "# with torch.no_grad():\n",
    "#     outputs = model(X_val)\n",
    "#     val_predictions.extend(outputs.squeeze().cpu().numpy())\n",
    "# val_rmse = np.sqrt(mean_squared_error(val_targets, val_predictions))\n",
    "# print(f\"Validation RMSE: {val_rmse:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf36663c",
   "metadata": {
    "papermill": {
     "duration": 0.014436,
     "end_time": "2024-04-15T13:59:00.293944",
     "exception": false,
     "start_time": "2024-04-15T13:59:00.279508",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6b2332d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:00.324433Z",
     "iopub.status.busy": "2024-04-15T13:59:00.323994Z",
     "iopub.status.idle": "2024-04-15T13:59:00.363211Z",
     "shell.execute_reply": "2024-04-15T13:59:00.361640Z"
    },
    "papermill": {
     "duration": 0.05926,
     "end_time": "2024-04-15T13:59:00.367582",
     "exception": false,
     "start_time": "2024-04-15T13:59:00.308322",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Ridge()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Ridge</label><div class=\"sk-toggleable__content\"><pre>Ridge()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "Ridge()"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.metrics import mean_squared_error\n",
    "X_stacked_train = np.column_stack((y_val_pred_tabnet, y_val_pred_xgb, y_val_pred_rf, y_val_pred_gb, y_val_pred_lgb))\n",
    "# use Ridge regression\n",
    "ridge_regressor = Ridge(alpha=1.0)  # adjust alpha parameter\n",
    "ridge_regressor.fit(X_stacked_train, y_val)  # y_val is the true val label\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1444cffa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:00.433278Z",
     "iopub.status.busy": "2024-04-15T13:59:00.432522Z",
     "iopub.status.idle": "2024-04-15T13:59:00.583921Z",
     "shell.execute_reply": "2024-04-15T13:59:00.582582Z"
    },
    "papermill": {
     "duration": 0.188183,
     "end_time": "2024-04-15T13:59:00.586800",
     "exception": false,
     "start_time": "2024-04-15T13:59:00.398617",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = test_dataset.drop(columns=[\"id\"]).values\n",
    "test_id = test_dataset[\"id\"].values\n",
    "sex_features = X[:,-3:]\n",
    "X_without_sex = X[:, :-3]\n",
    "sex_features_numeric = sex_features.astype(int)\n",
    "scaler = StandardScaler()\n",
    "X_scaled_ws = scaler.fit_transform(X_without_sex)\n",
    "test_scaled = np.concatenate((X_scaled_ws, sex_features_numeric), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3c2b91b0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:00.618762Z",
     "iopub.status.busy": "2024-04-15T13:59:00.618346Z",
     "iopub.status.idle": "2024-04-15T13:59:02.002438Z",
     "shell.execute_reply": "2024-04-15T13:59:02.001257Z"
    },
    "papermill": {
     "duration": 1.40366,
     "end_time": "2024-04-15T13:59:02.005734",
     "exception": false,
     "start_time": "2024-04-15T13:59:00.602074",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 9.59613 ]\n",
      " [ 9.459299]\n",
      " [ 9.777443]\n",
      " ...\n",
      " [12.728162]\n",
      " [12.583682]\n",
      " [ 8.63789 ]]\n",
      "[ 9.59613   9.459299  9.777443 ... 12.728162 12.583682  8.63789 ]\n"
     ]
    }
   ],
   "source": [
    "y_test_pred_tabnet = clf.predict(test_scaled)\n",
    "\n",
    "print(y_test_pred_tabnet)\n",
    "print(y_test_pred_tabnet.flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6a9ccbca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:02.038021Z",
     "iopub.status.busy": "2024-04-15T13:59:02.037588Z",
     "iopub.status.idle": "2024-04-15T13:59:02.125904Z",
     "shell.execute_reply": "2024-04-15T13:59:02.124875Z"
    },
    "papermill": {
     "duration": 0.108291,
     "end_time": "2024-04-15T13:59:02.128736",
     "exception": false,
     "start_time": "2024-04-15T13:59:02.020445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_test_pred_xgb = xgb_model.predict(test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "50665367",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:02.160535Z",
     "iopub.status.busy": "2024-04-15T13:59:02.159650Z",
     "iopub.status.idle": "2024-04-15T13:59:04.269758Z",
     "shell.execute_reply": "2024-04-15T13:59:04.268775Z"
    },
    "papermill": {
     "duration": 2.128972,
     "end_time": "2024-04-15T13:59:04.272456",
     "exception": false,
     "start_time": "2024-04-15T13:59:02.143484",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_test_pred_rf = rf_model.predict(test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "58239411",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:04.303533Z",
     "iopub.status.busy": "2024-04-15T13:59:04.303089Z",
     "iopub.status.idle": "2024-04-15T13:59:04.409529Z",
     "shell.execute_reply": "2024-04-15T13:59:04.408404Z"
    },
    "papermill": {
     "duration": 0.125001,
     "end_time": "2024-04-15T13:59:04.412159",
     "exception": false,
     "start_time": "2024-04-15T13:59:04.287158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_test_pred_gb = gb_model.predict(test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d1a68405",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:04.444052Z",
     "iopub.status.busy": "2024-04-15T13:59:04.443637Z",
     "iopub.status.idle": "2024-04-15T13:59:04.626584Z",
     "shell.execute_reply": "2024-04-15T13:59:04.625668Z"
    },
    "papermill": {
     "duration": 0.202016,
     "end_time": "2024-04-15T13:59:04.629417",
     "exception": false,
     "start_time": "2024-04-15T13:59:04.427401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_test_pred_lgb = lgb_model.predict(test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7c2fb9c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:04.662488Z",
     "iopub.status.busy": "2024-04-15T13:59:04.662045Z",
     "iopub.status.idle": "2024-04-15T13:59:04.675565Z",
     "shell.execute_reply": "2024-04-15T13:59:04.674565Z"
    },
    "papermill": {
     "duration": 0.035226,
     "end_time": "2024-04-15T13:59:04.681289",
     "exception": false,
     "start_time": "2024-04-15T13:59:04.646063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[10.29823049]\n",
      " [ 9.7492154 ]\n",
      " [10.13659373]\n",
      " ...\n",
      " [12.37967039]\n",
      " [12.7572765 ]\n",
      " [ 8.62963482]]\n"
     ]
    }
   ],
   "source": [
    "# 使用集成模型进行预测\n",
    "X_stacked_test = np.column_stack((y_test_pred_tabnet, y_test_pred_xgb, y_test_pred_rf, y_test_pred_gb, y_test_pred_lgb))\n",
    "y_test_pred_ensemble = ridge_regressor.predict(X_stacked_test)\n",
    "print(y_test_pred_ensemble)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a40bd0da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-15T13:59:04.746011Z",
     "iopub.status.busy": "2024-04-15T13:59:04.745326Z",
     "iopub.status.idle": "2024-04-15T13:59:04.972208Z",
     "shell.execute_reply": "2024-04-15T13:59:04.971085Z"
    },
    "papermill": {
     "duration": 0.262477,
     "end_time": "2024-04-15T13:59:04.975047",
     "exception": false,
     "start_time": "2024-04-15T13:59:04.712570",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "result_df = pd.DataFrame({'id': test_id, 'Rings': y_test_pred_ensemble.flatten()})\n",
    "# 将DataFrame保存到CSV文件中\n",
    "result_df.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8096274,
     "sourceId": 72489,
     "sourceType": "competition"
    },
    {
     "datasetId": 4790313,
     "sourceId": 8109578,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 229.129183,
   "end_time": "2024-04-15T13:59:06.616117",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-15T13:55:17.486934",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
