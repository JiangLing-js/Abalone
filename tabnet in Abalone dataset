{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9ca15662",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-04-14T12:31:38.254157Z",
     "iopub.status.busy": "2024-04-14T12:31:38.253776Z",
     "iopub.status.idle": "2024-04-14T12:31:39.217970Z",
     "shell.execute_reply": "2024-04-14T12:31:39.217026Z"
    },
    "papermill": {
     "duration": 0.974417,
     "end_time": "2024-04-14T12:31:39.220474",
     "exception": false,
     "start_time": "2024-04-14T12:31:38.246057",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/abalone1/abalone.csv\n",
      "/kaggle/input/playground-series-s4e4/sample_submission.csv\n",
      "/kaggle/input/playground-series-s4e4/train.csv\n",
      "/kaggle/input/playground-series-s4e4/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "52dc69c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-14T12:31:39.230732Z",
     "iopub.status.busy": "2024-04-14T12:31:39.230248Z",
     "iopub.status.idle": "2024-04-14T12:31:53.075045Z",
     "shell.execute_reply": "2024-04-14T12:31:53.073885Z"
    },
    "papermill": {
     "duration": 13.852209,
     "end_time": "2024-04-14T12:31:53.077765",
     "exception": false,
     "start_time": "2024-04-14T12:31:39.225556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pytorch-tabnet\r\n",
      "  Downloading pytorch_tabnet-4.1.0-py3-none-any.whl.metadata (15 kB)\r\n",
      "Requirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (1.26.4)\r\n",
      "Requirement already satisfied: scikit_learn>0.21 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (1.2.2)\r\n",
      "Requirement already satisfied: scipy>1.4 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (1.11.4)\r\n",
      "Requirement already satisfied: torch>=1.3 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (2.1.2+cpu)\r\n",
      "Requirement already satisfied: tqdm>=4.36 in /opt/conda/lib/python3.10/site-packages (from pytorch-tabnet) (4.66.1)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit_learn>0.21->pytorch-tabnet) (1.3.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit_learn>0.21->pytorch-tabnet) (3.2.0)\r\n",
      "Requirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (3.13.1)\r\n",
      "Requirement already satisfied: typing-extensions in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (4.9.0)\r\n",
      "Requirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (1.12)\r\n",
      "Requirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (3.2.1)\r\n",
      "Requirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (3.1.2)\r\n",
      "Requirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch>=1.3->pytorch-tabnet) (2024.2.0)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch>=1.3->pytorch-tabnet) (2.1.3)\r\n",
      "Requirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch>=1.3->pytorch-tabnet) (1.3.0)\r\n",
      "Downloading pytorch_tabnet-4.1.0-py3-none-any.whl (44 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.5/44.5 kB\u001b[0m \u001b[31m1.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: pytorch-tabnet\r\n",
      "Successfully installed pytorch-tabnet-4.1.0\r\n"
     ]
    }
   ],
   "source": [
    "!pip install pytorch-tabnet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e89cde75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-14T12:31:53.088765Z",
     "iopub.status.busy": "2024-04-14T12:31:53.088386Z",
     "iopub.status.idle": "2024-04-14T12:31:53.432238Z",
     "shell.execute_reply": "2024-04-14T12:31:53.431115Z"
    },
    "papermill": {
     "duration": 0.352558,
     "end_time": "2024-04-14T12:31:53.434664",
     "exception": false,
     "start_time": "2024-04-14T12:31:53.082106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Length  Diameter  Height  Whole weight  Whole weight.1  Whole weight.2  \\\n",
      "0   0.455     0.365   0.095        0.5140          0.2245          0.1010   \n",
      "1   0.350     0.265   0.090        0.2255          0.0995          0.0485   \n",
      "2   0.530     0.420   0.135        0.6770          0.2565          0.1415   \n",
      "\n",
      "   Shell weight  Rings  Sex_F  Sex_I  Sex_M  \n",
      "0          0.15     15  False  False   True  \n",
      "1          0.07      7  False  False   True  \n",
      "2          0.21      9   True  False  False  \n"
     ]
    }
   ],
   "source": [
    "train_dataset_root = r\"/kaggle/input/playground-series-s4e4/train.csv\"\n",
    "train_dataset_root2 = r\"/kaggle/input/abalone1/abalone.csv\"\n",
    "test_dataset_root = r\"/kaggle/input/playground-series-s4e4/test.csv\"\n",
    "train_dataset = pd.read_csv(train_dataset_root)\n",
    "# one hot\n",
    "train_dataset = pd.get_dummies(train_dataset, columns=['Sex'])\n",
    "test_dataset = pd.read_csv(test_dataset_root)\n",
    "test_dataset = pd.get_dummies(test_dataset, columns=['Sex'])\n",
    "# print(train_dataset.head(3))\n",
    "train_dataset2 = pd.read_csv(train_dataset_root2)\n",
    "train_dataset2 = pd.get_dummies(train_dataset2, columns=['Sex'])\n",
    "train_dataset2 = train_dataset2.rename(columns={'Shucked weight': 'Whole weight.1', 'Viscera weight': 'Whole weight.2'})\n",
    "print(train_dataset2.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5a35a6cd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-14T12:31:53.445040Z",
     "iopub.status.busy": "2024-04-14T12:31:53.444613Z",
     "iopub.status.idle": "2024-04-14T12:31:53.518657Z",
     "shell.execute_reply": "2024-04-14T12:31:53.517196Z"
    },
    "papermill": {
     "duration": 0.082434,
     "end_time": "2024-04-14T12:31:53.521448",
     "exception": false,
     "start_time": "2024-04-14T12:31:53.439014",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of X: (90615, 10)\n",
      "Shape of X2: (4177, 10)\n",
      "[[0.55 0.43 0.15 ... True False False]\n",
      " [0.63 0.49 0.145 ... True False False]\n",
      " [0.16 0.11 0.025 ... False True False]\n",
      " ...\n",
      " [0.6 0.475 0.205 ... False False True]\n",
      " [0.625 0.485 0.15 ... True False False]\n",
      " [0.71 0.555 0.195 ... False False True]]\n",
      "[[0.455 0.365 0.095 ... False False True]\n",
      " [0.35 0.265 0.09 ... False False True]\n",
      " [0.53 0.42 0.135 ... True False False]\n",
      " ...\n",
      " [0.6 0.475 0.205 ... False False True]\n",
      " [0.625 0.485 0.15 ... True False False]\n",
      " [0.71 0.555 0.195 ... False False True]]\n",
      "[11 11  6 ...  9 10 12]\n"
     ]
    }
   ],
   "source": [
    "X = train_dataset.drop(columns=[\"id\",\"Rings\"]).values  # feature\n",
    "X2 = train_dataset2.drop(columns=[\"Rings\"]).values\n",
    "print(\"Shape of X:\", X.shape)\n",
    "print(\"Shape of X2:\", X2.shape)\n",
    "X = np.concatenate((X, X2), axis=0)\n",
    "y = train_dataset['Rings'].values  # label\n",
    "y2 = train_dataset2['Rings'].values  # label\n",
    "y = np.concatenate((y, y2), axis=0)\n",
    "print(X)\n",
    "print(X2)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "234fbf01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-14T12:31:53.531746Z",
     "iopub.status.busy": "2024-04-14T12:31:53.531393Z",
     "iopub.status.idle": "2024-04-14T12:31:53.549477Z",
     "shell.execute_reply": "2024-04-14T12:31:53.548223Z"
    },
    "papermill": {
     "duration": 0.02629,
     "end_time": "2024-04-14T12:31:53.552151",
     "exception": false,
     "start_time": "2024-04-14T12:31:53.525861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(94792, 10)\n",
      "(94792, 3)\n",
      "(94792, 7)\n",
      "[[1 0 0]\n",
      " [1 0 0]\n",
      " [0 1 0]\n",
      " ...\n",
      " [0 0 1]\n",
      " [1 0 0]\n",
      " [0 0 1]]\n"
     ]
    }
   ],
   "source": [
    "sex_features = X[:,-3:]\n",
    "X_without_sex = X[:, :-3]\n",
    "sex_features_numeric = sex_features.astype(int)\n",
    "print(X.shape)\n",
    "print(sex_features.shape)\n",
    "print(X_without_sex.shape)\n",
    "print(sex_features_numeric)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6aa2838",
   "metadata": {
    "papermill": {
     "duration": 0.004335,
     "end_time": "2024-04-14T12:31:53.561316",
     "exception": false,
     "start_time": "2024-04-14T12:31:53.556981",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# **Preprocess**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "24ac8eda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-14T12:31:53.571968Z",
     "iopub.status.busy": "2024-04-14T12:31:53.571217Z",
     "iopub.status.idle": "2024-04-14T12:31:58.710888Z",
     "shell.execute_reply": "2024-04-14T12:31:58.709988Z"
    },
    "papermill": {
     "duration": 5.147488,
     "end_time": "2024-04-14T12:31:58.713191",
     "exception": false,
     "start_time": "2024-04-14T12:31:53.565703",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.48684955  0.4898446   0.37592107 ...  0.          0.\n",
      "   1.        ]\n",
      " [-1.6262931  -1.85500477 -1.58781366 ...  0.          1.\n",
      "   0.        ]\n",
      " [ 1.62794658  1.66226929  1.5541619  ...  1.          0.\n",
      "   0.        ]\n",
      " ...\n",
      " [ 0.10648387  0.18399468 -0.27865717 ...  0.          1.\n",
      "   0.        ]\n",
      " [ 1.50115802  1.2544694   1.29233061 ...  0.          0.\n",
      "   1.        ]\n",
      " [-1.24592743 -1.29427992 -1.06415106 ...  0.          1.\n",
      "   0.        ]]\n",
      "[[ 9]\n",
      " [ 6]\n",
      " [18]\n",
      " ...\n",
      " [ 8]\n",
      " [11]\n",
      " [ 7]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from sklearn.model_selection import train_test_split\n",
    "scaler = StandardScaler()\n",
    "X_scaled_ws = scaler.fit_transform(X_without_sex)\n",
    "X_scaled = np.concatenate((X_scaled_ws, sex_features_numeric), axis=1)\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_scaled, y, test_size=0.1, random_state=42)\n",
    "print(X_train)\n",
    "\n",
    "y_train = np.reshape(y_train, (-1, 1))\n",
    "y_val = np.reshape(y_val, (-1, 1))\n",
    "print(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "42a7836b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-14T12:31:58.724869Z",
     "iopub.status.busy": "2024-04-14T12:31:58.723771Z",
     "iopub.status.idle": "2024-04-14T12:33:29.965665Z",
     "shell.execute_reply": "2024-04-14T12:33:29.963698Z"
    },
    "papermill": {
     "duration": 91.250702,
     "end_time": "2024-04-14T12:33:29.968619",
     "exception": false,
     "start_time": "2024-04-14T12:31:58.717917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/pytorch_tabnet/abstract_model.py:82: UserWarning: Device used : cpu\n",
      "  warnings.warn(f\"Device used : {self.device}\")\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "epoch 0  | loss: 18.63206| val_0_rmsle: 0.22564 |  0:00:04s\n",
      "epoch 1  | loss: 4.08629 | val_0_rmsle: 0.18586 |  0:00:09s\n",
      "epoch 2  | loss: 3.88619 | val_0_rmsle: 0.17721 |  0:00:14s\n",
      "epoch 3  | loss: 3.81581 | val_0_rmsle: 0.16226 |  0:00:19s\n",
      "epoch 4  | loss: 3.75973 | val_0_rmsle: 0.16044 |  0:00:24s\n",
      "epoch 5  | loss: 3.74925 | val_0_rmsle: 0.16099 |  0:00:29s\n",
      "epoch 6  | loss: 3.76028 | val_0_rmsle: 0.16099 |  0:00:33s\n",
      "epoch 7  | loss: 3.76113 | val_0_rmsle: 0.15477 |  0:00:38s\n",
      "epoch 8  | loss: 3.76814 | val_0_rmsle: 0.16016 |  0:00:43s\n",
      "epoch 9  | loss: 3.72476 | val_0_rmsle: 0.15526 |  0:00:48s\n",
      "epoch 10 | loss: 3.71667 | val_0_rmsle: 0.15798 |  0:00:52s\n",
      "epoch 11 | loss: 3.72422 | val_0_rmsle: 0.15806 |  0:00:57s\n",
      "epoch 12 | loss: 3.7272  | val_0_rmsle: 0.15693 |  0:01:02s\n",
      "epoch 13 | loss: 3.71182 | val_0_rmsle: 0.16184 |  0:01:07s\n",
      "epoch 14 | loss: 3.75478 | val_0_rmsle: 0.15852 |  0:01:11s\n",
      "epoch 15 | loss: 3.67828 | val_0_rmsle: 0.1563  |  0:01:16s\n",
      "epoch 16 | loss: 3.67763 | val_0_rmsle: 0.15567 |  0:01:21s\n",
      "epoch 17 | loss: 3.70793 | val_0_rmsle: 0.15569 |  0:01:26s\n",
      "\n",
      "Early stopping occurred at epoch 17 with best_epoch = 7 and best_val_0_rmsle = 0.15477\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/pytorch_tabnet/callbacks.py:172: UserWarning: Best weights from best epoch are automatically used!\n",
      "  warnings.warn(wrn_msg)\n"
     ]
    }
   ],
   "source": [
    "from pytorch_tabnet.tab_model import TabNetRegressor\n",
    "\n",
    "clf = TabNetRegressor(n_steps=3, cat_idxs=[7,8,9], cat_dims=[2,2,2], device_name=\"cuda\")\n",
    "clf.fit(\n",
    "    X_train, y_train,\n",
    "    eval_set=[(X_val, y_val)],\n",
    "    eval_metric=['rmsle'], \n",
    "    batch_size=2048, \n",
    "    virtual_batch_size=64\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "34c2ac5d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-14T12:33:29.982475Z",
     "iopub.status.busy": "2024-04-14T12:33:29.981893Z",
     "iopub.status.idle": "2024-04-14T12:33:30.062195Z",
     "shell.execute_reply": "2024-04-14T12:33:30.060986Z"
    },
    "papermill": {
     "duration": 0.09047,
     "end_time": "2024-04-14T12:33:30.065120",
     "exception": false,
     "start_time": "2024-04-14T12:33:29.974650",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = test_dataset.drop(columns=[\"id\"]).values\n",
    "test_id = test_dataset[\"id\"].values\n",
    "sex_features = X[:,-3:]\n",
    "X_without_sex = X[:, :-3]\n",
    "sex_features_numeric = sex_features.astype(int)\n",
    "scaler = StandardScaler()\n",
    "X_scaled_ws = scaler.fit_transform(X_without_sex)\n",
    "test_scaled = np.concatenate((X_scaled_ws, sex_features_numeric), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "03487f9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-14T12:33:30.079281Z",
     "iopub.status.busy": "2024-04-14T12:33:30.078256Z",
     "iopub.status.idle": "2024-04-14T12:33:31.377507Z",
     "shell.execute_reply": "2024-04-14T12:33:31.376425Z"
    },
    "papermill": {
     "duration": 1.308644,
     "end_time": "2024-04-14T12:33:31.379798",
     "exception": false,
     "start_time": "2024-04-14T12:33:30.071154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 9.348183]\n",
      " [ 9.392266]\n",
      " [10.133303]\n",
      " ...\n",
      " [13.13685 ]\n",
      " [12.856373]\n",
      " [ 7.782162]]\n",
      "[ 9.348183  9.392266 10.133303 ... 13.13685  12.856373  7.782162]\n"
     ]
    }
   ],
   "source": [
    "preds = clf.predict(test_scaled)\n",
    "print(preds)\n",
    "print(preds.flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "06f41fdc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-14T12:33:31.393651Z",
     "iopub.status.busy": "2024-04-14T12:33:31.392474Z",
     "iopub.status.idle": "2024-04-14T12:33:31.498035Z",
     "shell.execute_reply": "2024-04-14T12:33:31.496909Z"
    },
    "papermill": {
     "duration": 0.115433,
     "end_time": "2024-04-14T12:33:31.500985",
     "exception": false,
     "start_time": "2024-04-14T12:33:31.385552",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "result_df = pd.DataFrame({'id': test_id, 'Rings': preds.flatten()})\n",
    "# 将DataFrame保存到CSV文件中\n",
    "result_df.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8096274,
     "sourceId": 72489,
     "sourceType": "competition"
    },
    {
     "datasetId": 4790313,
     "sourceId": 8109578,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30684,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 117.38312,
   "end_time": "2024-04-14T12:33:32.835820",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-14T12:31:35.452700",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
